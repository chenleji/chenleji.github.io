<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ljchen&#39;s Notes</title>
  
  <subtitle>Quick Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ljchen.net/"/>
  <updated>2020-04-06T09:24:01.486Z</updated>
  <id>http://ljchen.net/</id>
  
  <author>
    <name>ljchen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Eureka的微服务如何上Istio</title>
    <link href="http://ljchen.net/2020/04/06/%E4%BD%BF%E7%94%A8Eureka%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E4%B8%8AIstio/"/>
    <id>http://ljchen.net/2020/04/06/使用Eureka的微服务如何上Istio/</id>
    <published>2020-04-06T03:44:06.000Z</published>
    <updated>2020-04-06T09:24:01.486Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于当前公司的绝大多数应用都还是使用eureka来做服务发现，算法团队又提出一些灰度的需求。从不重复造轮子以及技术趋势的角度，自然想到是否能够将Istio整合到平台产品中。但是，据我所知，eureka2.0已经被放弃了，Istio也在早期版本中，直接废弃了对Eureka做服务发现的支持。因此，这可能需要对现有的脚手架做一定改造，这个后面具体再论。另一封面，听说istio在架构上发生了很大的变化，于是下载了1.5版本来亲自体验了一下。&lt;/p&gt;
    
    </summary>
    
      <category term="cloud-native" scheme="http://ljchen.net/categories/cloud-native/"/>
    
    
      <category term="cloud-native" scheme="http://ljchen.net/tags/cloud-native/"/>
    
      <category term="service-mesh" scheme="http://ljchen.net/tags/service-mesh/"/>
    
      <category term="istio" scheme="http://ljchen.net/tags/istio/"/>
    
      <category term="eureka" scheme="http://ljchen.net/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>TiDB架构原理</title>
    <link href="http://ljchen.net/2019/10/12/TiDB%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"/>
    <id>http://ljchen.net/2019/10/12/TiDB架构原理/</id>
    <published>2019-10-12T09:23:38.000Z</published>
    <updated>2020-04-06T09:24:01.469Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;MySQL的一些集群方案和数据库中间件都在视图解决当表条目变大时，查询性能下降的问题。TiDB的设计原生适用于大规模数据量的存储和查询，重点学习了关于其计算、存储和调度的三篇文档，整理如下。&lt;/p&gt;
    
    </summary>
    
      <category term="distributed-system" scheme="http://ljchen.net/categories/distributed-system/"/>
    
    
      <category term="distributed-system" scheme="http://ljchen.net/tags/distributed-system/"/>
    
      <category term="TiKV" scheme="http://ljchen.net/tags/TiKV/"/>
    
      <category term="TiDB" scheme="http://ljchen.net/tags/TiDB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL Innodb Cluster(MGR)压力测试</title>
    <link href="http://ljchen.net/2019/09/24/MySQL-Innodb-Cluster-MGR-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <id>http://ljchen.net/2019/09/24/MySQL-Innodb-Cluster-MGR-集群搭建与压力测试/</id>
    <published>2019-09-24T14:29:32.000Z</published>
    <updated>2020-04-06T09:24:01.467Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前一直对腾讯TDSQL的实现原理比较感兴趣，号称使用Raft来保障数据的一致性。MySQL官方推荐使用MGR的方案来搭建高可用集群，基于Paxos的MGR毕竟是官方的解决方案，也很想知道其性能到底如何。&lt;/p&gt;
    
    </summary>
    
      <category term="distributed-system" scheme="http://ljchen.net/categories/distributed-system/"/>
    
    
      <category term="distributed-system" scheme="http://ljchen.net/tags/distributed-system/"/>
    
      <category term="mysql" scheme="http://ljchen.net/tags/mysql/"/>
    
      <category term="mgr" scheme="http://ljchen.net/tags/mgr/"/>
    
      <category term="mysql-innodb-cluster" scheme="http://ljchen.net/tags/mysql-innodb-cluster/"/>
    
      <category term="mysql-cluster" scheme="http://ljchen.net/tags/mysql-cluster/"/>
    
  </entry>
  
  <entry>
    <title>MySQL必须掌握的原理</title>
    <link href="http://ljchen.net/2019/09/22/MySQL%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://ljchen.net/2019/09/22/MySQL必须掌握的原理/</id>
    <published>2019-09-22T12:31:01.000Z</published>
    <updated>2020-04-06T09:24:01.467Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;整理多数据中心容灾备份的方案的时候，必然绕不过应用的持久化的备份方案。MySQL经历了这么多年的发展，对应也衍生除了很多高可用的部署架构，能够适用于两地三中心或者同城多活的场景。但是，这里我准备系统性的粗略理一遍MySQL的原理，日后再慢慢填充各部分的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="distributed-system" scheme="http://ljchen.net/categories/distributed-system/"/>
    
    
      <category term="distributed-system" scheme="http://ljchen.net/tags/distributed-system/"/>
    
      <category term="mysql" scheme="http://ljchen.net/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>应用可靠性保障评估</title>
    <link href="http://ljchen.net/2019/09/19/%E5%BA%94%E7%94%A8%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BF%9D%E9%9A%9C%E8%AF%84%E4%BC%B0/"/>
    <id>http://ljchen.net/2019/09/19/应用可靠性保障评估/</id>
    <published>2019-09-19T07:05:43.000Z</published>
    <updated>2020-04-06T09:24:01.487Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近整理应用可靠性保障评估建议，吸取之前做微服务的一些经验，同时也参考了许多书籍，大致整理了一些细则。分别从可靠性、高性能、伸缩性、容错和灾备、监控以及文档化的角度来评估应用是否具有高可靠保障。大致整理如下，有需要的同学，可以参考！&lt;/p&gt;
    
    </summary>
    
      <category term="cloud-native" scheme="http://ljchen.net/categories/cloud-native/"/>
    
    
      <category term="microservice" scheme="http://ljchen.net/tags/microservice/"/>
    
      <category term="reliability" scheme="http://ljchen.net/tags/reliability/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务协议</title>
    <link href="http://ljchen.net/2019/08/25/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%8D%8F%E8%AE%AE/"/>
    <id>http://ljchen.net/2019/08/25/分布式事务协议/</id>
    <published>2019-08-25T01:54:39.000Z</published>
    <updated>2020-04-06T09:24:01.486Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;分布式系统的一致性是特别伤脑筋的事情，当然也可以使用一些现成的协议，比如Raft之类的。今天我们准备来聊下两阶段提交（2PC）和三阶段提交（3PC），以及它们之间的关系。&lt;/p&gt;
    
    </summary>
    
      <category term="distributed-system" scheme="http://ljchen.net/categories/distributed-system/"/>
    
    
      <category term="distributed-system" scheme="http://ljchen.net/tags/distributed-system/"/>
    
      <category term="event" scheme="http://ljchen.net/tags/event/"/>
    
      <category term="2PC" scheme="http://ljchen.net/tags/2PC/"/>
    
      <category term="3PC" scheme="http://ljchen.net/tags/3PC/"/>
    
  </entry>
  
  <entry>
    <title>Redis Cluster总结</title>
    <link href="http://ljchen.net/2019/08/24/Redis-Cluster%E6%80%BB%E7%BB%93/"/>
    <id>http://ljchen.net/2019/08/24/Redis-Cluster总结/</id>
    <published>2019-08-24T02:26:00.000Z</published>
    <updated>2020-04-06T09:24:01.468Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Redis是一个非常小而美的缓存中间件，官方早期没有集群方案的时候，社区采用哨兵的方式来做集群。官方在3.0版本后开始支持集群方案，但是依然需要至少6台节点，那处于对各种中间件研究的兴趣，我们就来聊聊Redis Cluster希望解决的问题，以及其实现原理。&lt;/p&gt;
    
    </summary>
    
      <category term="distributed-system" scheme="http://ljchen.net/categories/distributed-system/"/>
    
    
      <category term="distributed-system" scheme="http://ljchen.net/tags/distributed-system/"/>
    
      <category term="redis" scheme="http://ljchen.net/tags/redis/"/>
    
      <category term="redis-cluster" scheme="http://ljchen.net/tags/redis-cluster/"/>
    
      <category term="cache" scheme="http://ljchen.net/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>CRD Operator要点</title>
    <link href="http://ljchen.net/2019/07/24/CRD-operator%E8%A6%81%E7%82%B9/"/>
    <id>http://ljchen.net/2019/07/24/CRD-operator要点/</id>
    <published>2019-07-24T14:05:31.000Z</published>
    <updated>2020-04-06T09:24:01.465Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;头阵子基于kubebuilder实现了一套用于大数据交换平台底层调度的operator。在过程中遇到一些坑，平时学习的时候不太容易注意到的点，简单记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://ljchen.net/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="opensource" scheme="http://ljchen.net/tags/opensource/"/>
    
      <category term="operator" scheme="http://ljchen.net/tags/operator/"/>
    
      <category term="CRD" scheme="http://ljchen.net/tags/CRD/"/>
    
  </entry>
  
  <entry>
    <title>kubeedge之EdgeSite</title>
    <link href="http://ljchen.net/2019/07/22/kubeedge%E4%B9%8BEdgeSite/"/>
    <id>http://ljchen.net/2019/07/22/kubeedge之EdgeSite/</id>
    <published>2019-07-22T13:05:54.000Z</published>
    <updated>2020-04-06T09:24:01.484Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;kubeedge默认在云端部署edgeController和deviceController，然后通过websocket/quic隧道连接云端和边缘端，通过云端一个中心来统一调度应用到特定edge node上运行。但是，就像Rancher K3S的应用场景，有些时候边缘端也希望运行一套完整的k8s集群。K3S的方案只是提供了一套精简的k8s集群，而kubeedge的edgesite模式，除了运行k8s集群之外，还提供了对IOT设备的适配和支持。&lt;br&gt;
    
    </summary>
    
      <category term="edge-compute" scheme="http://ljchen.net/categories/edge-compute/"/>
    
    
      <category term="opensource" scheme="http://ljchen.net/tags/opensource/"/>
    
      <category term="kubeedge" scheme="http://ljchen.net/tags/kubeedge/"/>
    
      <category term="edgesite" scheme="http://ljchen.net/tags/edgesite/"/>
    
      <category term="edge-compute" scheme="http://ljchen.net/tags/edge-compute/"/>
    
  </entry>
  
  <entry>
    <title>Kubeedge实现原理</title>
    <link href="http://ljchen.net/2019/07/21/kubeedge%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://ljchen.net/2019/07/21/kubeedge实现原理/</id>
    <published>2019-07-21T01:27:28.000Z</published>
    <updated>2020-04-06T09:24:01.484Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;可能由于各自的定位不同，K3S更像是一个kubernetes厂商的一个发行版，在边缘计算方面其实是没有摄入细节的。相比起来，kubeedge目标更明确，除了在kubernetes的方面做了各种异步通信通道，保障offline后的业务连续性之外；还定义了一系列的设备抽象，用来管理边缘设备。而且，其v1.0版本正朝着边缘端服务网格，以及函数式计算等方向发展。&lt;br&gt;
    
    </summary>
    
      <category term="edge-compute" scheme="http://ljchen.net/categories/edge-compute/"/>
    
    
      <category term="opensource" scheme="http://ljchen.net/tags/opensource/"/>
    
      <category term="kubeedge" scheme="http://ljchen.net/tags/kubeedge/"/>
    
      <category term="edge-compute" scheme="http://ljchen.net/tags/edge-compute/"/>
    
  </entry>
  
  <entry>
    <title>基于K3s部署kubeedge</title>
    <link href="http://ljchen.net/2019/07/15/%E5%9F%BA%E4%BA%8Ek3s%E9%83%A8%E7%BD%B2kubeedge/"/>
    <id>http://ljchen.net/2019/07/15/基于k3s部署kubeedge/</id>
    <published>2019-07-15T13:11:18.000Z</published>
    <updated>2020-04-06T09:24:01.487Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在边缘计算云原生领域，Rancher开源的k3s侧重于在边缘运行完整的k8s集群，而华为开源的kubeedge则是在边缘运行可以脱机的k8s节点。刚好手上有aliyun和腾讯云上各一台配置比较差的虚拟机，平时用来跑下基本的k8s服务，做个调试验证用的，一跑应用就卡死，内存严重不足。这场景似乎与边缘计算资源局限的窘境很类似；于是，大胆的想像在其中一台机器上跑k3s，同时用其作为kubeedge的k8s server侧；在另外一台上跑kubeedge的edge节点，组成一个集群。&lt;br&gt;
    
    </summary>
    
      <category term="edge-compute" scheme="http://ljchen.net/categories/edge-compute/"/>
    
    
      <category term="opensource" scheme="http://ljchen.net/tags/opensource/"/>
    
      <category term="rancher" scheme="http://ljchen.net/tags/rancher/"/>
    
      <category term="kubeedge" scheme="http://ljchen.net/tags/kubeedge/"/>
    
      <category term="edge-compute" scheme="http://ljchen.net/tags/edge-compute/"/>
    
      <category term="k3s" scheme="http://ljchen.net/tags/k3s/"/>
    
  </entry>
  
  <entry>
    <title>Knative Eventing必知原理</title>
    <link href="http://ljchen.net/2019/07/09/knative-eventing%E5%BF%85%E7%9F%A5%E5%8E%9F%E7%90%86/"/>
    <id>http://ljchen.net/2019/07/09/knative-eventing必知原理/</id>
    <published>2019-07-09T02:39:04.000Z</published>
    <updated>2020-04-06T09:24:01.483Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;serverless需要有一套广泛兼容多种事件的时间触发框架，从而支持在不同应用场景下基于事件来创建server，对外提供服务。knative的eventing的目标就是提供这样一套框架。当前knative原生支持的event类型还比较有限，但是系统提供了开放的container source，可以基于需求自定义实现。本篇的示例主要基于系统sample文档的in-memory-channel来论述其实现原理。&lt;br&gt;
    
    </summary>
    
      <category term="cloud-native" scheme="http://ljchen.net/categories/cloud-native/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="cloud-native" scheme="http://ljchen.net/tags/cloud-native/"/>
    
      <category term="service-mesh" scheme="http://ljchen.net/tags/service-mesh/"/>
    
      <category term="knative" scheme="http://ljchen.net/tags/knative/"/>
    
      <category term="eventing" scheme="http://ljchen.net/tags/eventing/"/>
    
  </entry>
  
  <entry>
    <title>Tekton原理</title>
    <link href="http://ljchen.net/2019/06/30/tekton%E5%8E%9F%E7%90%86/"/>
    <id>http://ljchen.net/2019/06/30/tekton原理/</id>
    <published>2019-06-30T03:54:29.000Z</published>
    <updated>2020-04-06T09:24:01.486Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Tekton作为google开源出来的一个CD工具，与knative之前的build有很多相似的地方。build的功能相对来将较单一，且社区提出了很多改进的地方都由于其现有的架构设计局限而找不到解决方案。那么tekton基于build，都有哪些提升？&lt;/p&gt;
    
    </summary>
    
      <category term="cloud-native" scheme="http://ljchen.net/categories/cloud-native/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="cloud-native" scheme="http://ljchen.net/tags/cloud-native/"/>
    
      <category term="service-mesh" scheme="http://ljchen.net/tags/service-mesh/"/>
    
      <category term="knative" scheme="http://ljchen.net/tags/knative/"/>
    
      <category term="tekton" scheme="http://ljchen.net/tags/tekton/"/>
    
  </entry>
  
  <entry>
    <title>Tekton安装镜像</title>
    <link href="http://ljchen.net/2019/06/29/tekton%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F/"/>
    <id>http://ljchen.net/2019/06/29/tekton安装镜像/</id>
    <published>2019-06-29T13:09:52.000Z</published>
    <updated>2020-04-06T09:24:01.486Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;knative自v0.7.0开始废弃现有的build而拥抱tekton，由于均是基于google的项目，所以镜像下载成为一个大问题。本文采用类似于&lt;a href=&quot;http://ljchen.net/2019/06/03/knative%E5%A2%99%E5%86%85%E5%AE%89%E8%A3%85/&quot;&gt;knative墙内安装&lt;/a&gt; 的方式来处理镜像和安装脚本，适用于墙内安装体验。&lt;/p&gt;
    
    </summary>
    
      <category term="cloud-native" scheme="http://ljchen.net/categories/cloud-native/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="cloud-native" scheme="http://ljchen.net/tags/cloud-native/"/>
    
      <category term="service-mesh" scheme="http://ljchen.net/tags/service-mesh/"/>
    
      <category term="knative" scheme="http://ljchen.net/tags/knative/"/>
    
      <category term="tekton" scheme="http://ljchen.net/tags/tekton/"/>
    
  </entry>
  
  <entry>
    <title>Knative流量的秘密</title>
    <link href="http://ljchen.net/2019/06/29/knative%E6%B5%81%E9%87%8F%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://ljchen.net/2019/06/29/knative流量的秘密/</id>
    <published>2019-06-29T07:08:17.000Z</published>
    <updated>2020-04-06T09:24:01.483Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;knative在service里面实现了serverless的功能，其中最重要的莫过于按需来启动服务，并基于流量来弹性伸缩。在社区的文档里面找到这样一张架构设计图，先初略理解一下，详细介绍一下其流量转发流程。&lt;/p&gt;
&lt;p&gt;该文基于knative v0.6.0版本。&lt;/p&gt;
    
    </summary>
    
      <category term="cloud-native" scheme="http://ljchen.net/categories/cloud-native/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="cloud-native" scheme="http://ljchen.net/tags/cloud-native/"/>
    
      <category term="service-mesh" scheme="http://ljchen.net/tags/service-mesh/"/>
    
      <category term="knative" scheme="http://ljchen.net/tags/knative/"/>
    
      <category term="autoscale" scheme="http://ljchen.net/tags/autoscale/"/>
    
      <category term="serverless" scheme="http://ljchen.net/tags/serverless/"/>
    
  </entry>
  
  <entry>
    <title>Knative Build实现</title>
    <link href="http://ljchen.net/2019/06/19/knative-build%E5%AE%9E%E7%8E%B0/"/>
    <id>http://ljchen.net/2019/06/19/knative-build实现/</id>
    <published>2019-06-19T13:46:35.000Z</published>
    <updated>2020-04-06T09:24:01.483Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;knative-build提供将源码编译、构建、打包的整个流水线流程。其核心原理是基于pod的init contaier来定义一系列串行执行的stage。由于每一个stage都可以由用户自定义，若加以扩展，还可以用于更多场景。&lt;/p&gt;
    
    </summary>
    
      <category term="cloud-native" scheme="http://ljchen.net/categories/cloud-native/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="cloud-native" scheme="http://ljchen.net/tags/cloud-native/"/>
    
      <category term="service-mesh" scheme="http://ljchen.net/tags/service-mesh/"/>
    
      <category term="knative" scheme="http://ljchen.net/tags/knative/"/>
    
  </entry>
  
  <entry>
    <title>K8s Api-Server流程简述</title>
    <link href="http://ljchen.net/2019/06/16/k8s-api-server%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/"/>
    <id>http://ljchen.net/2019/06/16/k8s-api-server流程简述/</id>
    <published>2019-06-16T01:06:16.000Z</published>
    <updated>2020-04-06T09:24:01.482Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近开发环境的k8s出现过一次读取不出来configmap，并导致api-server OOM重启的现象，供应商说是因为configmap条目太多，导致api-server大量decode etcd的数据为yaml所致。在原生k8s上反复重试过多次，均无法复现该现象，所以又看了一遍api-server大致的代码逻辑，这里简单记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://ljchen.net/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="opensource" scheme="http://ljchen.net/tags/opensource/"/>
    
      <category term="CKA" scheme="http://ljchen.net/tags/CKA/"/>
    
      <category term="api-server" scheme="http://ljchen.net/tags/api-server/"/>
    
  </entry>
  
  <entry>
    <title>K8s Client代码自动生成</title>
    <link href="http://ljchen.net/2019/06/14/K8s-client%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/"/>
    <id>http://ljchen.net/2019/06/14/K8s-client代码自动生成/</id>
    <published>2019-06-14T13:50:06.000Z</published>
    <updated>2020-04-06T09:24:01.467Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在Istio和Knative，以及众多中间件operator中都会经常看到有使用informer去watch自定义CRD资源，然后reconsile的代码。其实每一个controller/operator都是使用api-server的客户端在操作资源。对于k8s支持的核心资源类型可以直接引用client-go，对于CRD，当前主要有三种方案。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://ljchen.net/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="opensource" scheme="http://ljchen.net/tags/opensource/"/>
    
      <category term="operator" scheme="http://ljchen.net/tags/operator/"/>
    
      <category term="controller" scheme="http://ljchen.net/tags/controller/"/>
    
  </entry>
  
  <entry>
    <title>K8s认证详解</title>
    <link href="http://ljchen.net/2019/06/13/K8s%E8%AE%A4%E8%AF%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://ljchen.net/2019/06/13/K8s认证详解/</id>
    <published>2019-06-13T12:28:04.000Z</published>
    <updated>2020-04-06T09:24:01.467Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;以前在基于k8s做应用开发的时候，都是使用admin来使用k8s，基本不用去关注授权的问题。但是，当我们将k8s作为PaaS平台的容器编排引擎，并引入多租户时，就涉及到权限管理相关的问题了。那么，如果你刚好是公司的系统管理员，当你部署完一套k8s，准备将其提供给多个部门使用的时候（他们希望彼此互不影响），接下来的内容就特别适合你了。&lt;br&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="http://ljchen.net/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://ljchen.net/tags/k8s/"/>
    
      <category term="opensource" scheme="http://ljchen.net/tags/opensource/"/>
    
      <category term="authentication" scheme="http://ljchen.net/tags/authentication/"/>
    
      <category term="security" scheme="http://ljchen.net/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Etcd原理与运维</title>
    <link href="http://ljchen.net/2019/06/11/Etcd%E5%8E%9F%E7%90%86%E4%B8%8E%E8%BF%90%E7%BB%B4/"/>
    <id>http://ljchen.net/2019/06/11/Etcd原理与运维/</id>
    <published>2019-06-11T13:12:21.000Z</published>
    <updated>2020-04-06T09:24:01.466Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;基于K8s之上的声明式API编程可以说Etcd起到了至关重要的作用。一方面，API Server使用了etcd的特性从而提供了订阅，选举等功能。另一方面，k8s集群的所有配置信息也都集中存放于etcd中，etcd完好的情况下，可以随意的变动node节点，k8s最终会保障服务都按照预期来编排和对外提供服务。&lt;/p&gt;
    
    </summary>
    
      <category term="distributed-system" scheme="http://ljchen.net/categories/distributed-system/"/>
    
    
      <category term="distributed-system" scheme="http://ljchen.net/tags/distributed-system/"/>
    
      <category term="Etcd" scheme="http://ljchen.net/tags/Etcd/"/>
    
      <category term="Raft" scheme="http://ljchen.net/tags/Raft/"/>
    
  </entry>
  
</feed>
